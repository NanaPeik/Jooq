/*
 * This file is generated by jOOQ.
 */
package ge.tsu.weather.classes.tables.records;


import ge.tsu.weather.classes.tables.Weather;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeatherRecord extends UpdatableRecordImpl<WeatherRecord> implements Record6<Integer, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.weather.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.weather.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.weather.city</code>.
     */
    public void setCity(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.weather.city</code>.
     */
    public String getCity() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.weather.region</code>.
     */
    public void setRegion(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.weather.region</code>.
     */
    public String getRegion() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.weather.temp</code>.
     */
    public void setTemp(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.weather.temp</code>.
     */
    public String getTemp() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.weather.humidity</code>.
     */
    public void setHumidity(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.weather.humidity</code>.
     */
    public String getHumidity() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.weather.wind</code>.
     */
    public void setWind(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.weather.wind</code>.
     */
    public String getWind() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, String, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Weather.WEATHER.ID;
    }

    @Override
    public Field<String> field2() {
        return Weather.WEATHER.CITY;
    }

    @Override
    public Field<String> field3() {
        return Weather.WEATHER.REGION;
    }

    @Override
    public Field<String> field4() {
        return Weather.WEATHER.TEMP;
    }

    @Override
    public Field<String> field5() {
        return Weather.WEATHER.HUMIDITY;
    }

    @Override
    public Field<String> field6() {
        return Weather.WEATHER.WIND;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCity();
    }

    @Override
    public String component3() {
        return getRegion();
    }

    @Override
    public String component4() {
        return getTemp();
    }

    @Override
    public String component5() {
        return getHumidity();
    }

    @Override
    public String component6() {
        return getWind();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCity();
    }

    @Override
    public String value3() {
        return getRegion();
    }

    @Override
    public String value4() {
        return getTemp();
    }

    @Override
    public String value5() {
        return getHumidity();
    }

    @Override
    public String value6() {
        return getWind();
    }

    @Override
    public WeatherRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public WeatherRecord value2(String value) {
        setCity(value);
        return this;
    }

    @Override
    public WeatherRecord value3(String value) {
        setRegion(value);
        return this;
    }

    @Override
    public WeatherRecord value4(String value) {
        setTemp(value);
        return this;
    }

    @Override
    public WeatherRecord value5(String value) {
        setHumidity(value);
        return this;
    }

    @Override
    public WeatherRecord value6(String value) {
        setWind(value);
        return this;
    }

    @Override
    public WeatherRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WeatherRecord
     */
    public WeatherRecord() {
        super(Weather.WEATHER);
    }

    /**
     * Create a detached, initialised WeatherRecord
     */
    public WeatherRecord(Integer id, String city, String region, String temp, String humidity, String wind) {
        super(Weather.WEATHER);

        setId(id);
        setCity(city);
        setRegion(region);
        setTemp(temp);
        setHumidity(humidity);
        setWind(wind);
    }
}
